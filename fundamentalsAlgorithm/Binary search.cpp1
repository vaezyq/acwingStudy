//
// Created by 22126 on 2021/10/11.
//

#include <iostream>
#include <algorithm>

const int N = 1e5;

using namespace std;

int lowerBinarySearch(int *array, int arrayLen, int val);

int upperBinarySearch(int *array, int arrayLen, int val);

int main() {
    int array[N];
    int arrayLen, queryNum;
    int val;
    cin >> arrayLen >> queryNum;
    for (int i = 0; i < arrayLen; ++i) {
        scanf("%d", &array[i]);
    }


    for (int k = 0; k < queryNum; ++k) {
        scanf("%d", &val);
//这里的find函数会增大时间开销，只需要使用得到的指针a判断其是否为val即可

//        if (find(array, array + arrayLen, val) == array + arrayLen) {
//            printf("-1 -1\n");
//            continue;
//        }

        int *a = lower_bound(array, array + arrayLen, val);
        if (*a != val) {
            printf("-1 -1\n");
            continue;
        }
//这里采用遍历寻找最后一个位置会增大时间复杂度，因为遍历的复杂度是O(n)，应该继续采用二分的方式

//        int *it = a;
//        while (it < array + arrayLen) {
//            if (*it != val) {
//                break;
//            }
//            it++;
//        }

        int *it = upper_bound(array, array + arrayLen, val);
        if (a == array + arrayLen) {
            printf("-1 -1\n");
        } else {
            printf("%d %d\n", a - array, it - array - 1);
        }
    }


}


//第二种写法

int lowerBinarySearch(int *array, int arrayLen, int val) {
    int l = -1, r = arrayLen;
    int middle;
    while (l + 1 != r) {
        middle = (l + r) / 2;
        if (array[middle] < val) {
            l = middle;
        } else {
            r = middle;
        }
    }
    return r;

}


int upperBinarySearch(int *array, int arrayLen, int val) {
    int l = -1, r = arrayLen;
    int middle;
    while (l + 1 != r) {
        middle = (l + r) / 2;
        if (array[middle] > val) {
            r = middle;
        } else {
            l = middle;
        }
    }
    return l;



}




